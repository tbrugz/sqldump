#
# TODO: copy/rename to sqldump.properties
#

# just a variable for using ahead - name has no special meaning 
outputdir=output

#
# output props
#
sqldump.mainoutputfilepattern=${outputdir}/${schemaname}_${objecttype}_dump.sql
sqldump.outputobjectwithreferencingtable=grant,index
sqldump.outputfilepattern.maptype.PROCEDURE=EXECUTABLE
sqldump.outputfilepattern.maptype.TRIGGER=EXECUTABLE
sqldump.outputfilepattern.maptype.FUNCTION=EXECUTABLE
sqldump.outputfilepattern.bytype.EXECUTABLE=${outputdir}/EXECUTABLEs.sql

# other sqldump.outputfilepattern examples:
#sqldump.outputfilepattern=output/${schemaname}/${objecttype}/${objectname}.sql
#sqldump.outputfilepattern=output/${objecttype}/${schemaname}_${objectname}.sql
#sqldump.outputobjectwithreferencingtable=grant, index, fk, trigger

# other outputfilepattern by object types. "sqldump.outputobjectwithreferencingtable" takes precedence
#sqldump.outputfilepattern.bytype.TABLE=output/TABLE.sql
#sqldump.outputfilepattern.bytype.VIEW=output/VIEW.sql
#sqldump.outputfilepattern.bytype.INDEX=output/INDEX.sql
#sqldump.outputfilepattern.bytype.EXECUTABLE=output/EXECUTABLE.sql
#sqldump.outputfilepattern.bytype.TRIGGER=output/TRIGGER.sql
#sqldump.outputfilepattern.bytype.SEQUENCE=output/SEQUENCE.sql
#sqldump.outputfilepattern.bytype.SYNONYM=output/SYNONYM.sql
#sqldump.outputfilepattern.bytype.GRANT=output/GRANTS.sql
#sqldump.outputfilepattern.bytype.FK=output/FK.sql

#
# schema grab props
#

# grabclass can be: JDBCSchemaGrabber, JAXBSchemaXMLSerializer, SchemaSerializer, CastorSchemaXMLSerializer
sqldump.schemagrab.grabclass=JDBCSchemaGrabber

sqldump.dotests=true
sqldump.doschemadump=true
sqldump.doschemadump.grants=true
sqldump.doschemadump.fks=true
sqldump.doschemadump.fks.atend=true
sqldump.doschemadump.pks=true
# sqldump.dbspecificfeatures.grabindexes may be used instead of sqldump.doschemadump.indexes (really better performance on oracle)
sqldump.doschemadump.indexes=false
sqldump.dumpwithschemaname=true

# recursive dump of tables based on FKs
sqldump.doschemadump.recursivedumpbasedonfks=true
sqldump.doschemadump.recursivedumpbasedonfks.deep=true

#
# 'sqldump.fromdbid' selects which specificgrabclass to use, column type conversion, ... 
#
sqldump.fromdbid=oracle
sqldump.todbid=pgsql
# autodetect database product
sqldump.fromdbid.autodetect=true

sqldump.dumpsynonymastable=false
sqldump.dumpviewastable=false


#
# dbms specific features grab
#
sqldump.usedbspecificfeatures=true
sqldump.dbspecificfeatures.grabindexes=true
sqldump.dbspecificfeatures.sequencestartwithdump=false


#
# data dump props
#
sqldump.dodatadump=false
sqldump.datadump.tables=TABLE_X, TABLE_Y, TABLE_Z

# syntaxes
sqldump.datadump.dumpsyntaxes=insertinto, csv, json, xml

# default prop: sqldump.datadump.filepattern
# sqldump.datadump.filepattern=${outputdir}/data_${tablename}.${syntaxfileext}

# syntax-specific props: sqldump.datadump.<syntaxid>.filepattern
sqldump.datadump.insertinto.filepattern=${outputdir}/data_${tablename}.sql
sqldump.datadump.csv.filepattern=${outputdir}/data_${tablename}.csv
sqldump.datadump.json.filepattern=${outputdir}/data_${tablename}.json
sqldump.datadump.xml.filepattern=${outputdir}/data_${tablename}.xml

#
# InsertInfo syntax props
#
sqldump.datadump.useinsertintosyntax.withcolumnnames=false

#
# CSV syntax props
#
sqldump.datadump.tablenameheader=false
sqldump.datadump.columnnamesheader=true
sqldump.datadump.recorddelimiter=\r\n
sqldump.datadump.columndelimiter=;

# charset:: default: UTF-8; options: ISO-8859-1, UTF-16, US-ASCII, ...
#sqldump.datadump.charset=UTF-8 
# default date format: ''yyyy-MM-dd''
sqldump.datadump.dateformat=''yyyy-MM-dd''
# oracle TO_DATE syntax: sqldump.datadump.dateformat='TO_DATE('''yyyy-MM-dd''',''YYYY-MM-DD'')'
sqldump.datadump.rowlimit=100
sqldump.datadump.orderbypk=true

sqldump.datadump.TABLE_X.rowlimit=500
sqldump.datadump.TABLE_X.where=NAME like 'Bill %'
sqldump.datadump.TABLE_Y.columns=id, name
sqldump.datadump.TABLE_Y.order=TYPE, NAME

#
# sql queries
#
sqldump.query.1.sql=\
select * from TABLE_X
sqldump.query.1.name=TABLE_X
sqldump.query.1.rowlimit=10000
sqldump.query.2.file=c:/xxx/query2.sql
sqldump.query.2.name=query_2
sqldump.query.2.rowlimit=10000


#
# serialization & xml serialization
#
sqldump.serialization.outfile=${outputdir}/schemaModel.ser
sqldump.serialization.infile=${outputdir}/schemaModel.ser

sqldump.xmlserialization.jaxb.outfile=${outputdir}/schemaModel.jaxb.xml
sqldump.xmlserialization.jaxb.infile=${outputdir}/schemaModel.jaxb.xml

sqldump.xmlserialization.castor.outfile=${outputdir}/schemaModel.castor.xml
sqldump.xmlserialization.castor.infile=${outputdir}/schemaModel.castor.xml


#
# graphML output
#
sqldump.graphmldump.outputfile=${outputdir}/db-schema.graphml

############
#
# connection/driver info 
#

#
# reads password from console
#
sqldump.askforpassword=true

# MS Access - doesn't really work (yet)
#sqldump.driverclass=sun.jdbc.odbc.JdbcOdbcDriver
#sqldump.dburl=jdbc:odbc:Driver={MicroSoft Access Driver (*.mdb)};DBQ=Northwind.mdb

# Oracle
#sqldump.driverclass=oracle.jdbc.OracleDriver
#sqldump.dburl=jdbc:oracle:thin:@<url>:<port>:<sid>
#sqldump.user=scott
#sqldump.password=tiger
#sqldump.dumpschemapattern=EMPDEPT

# PostgreSQL
#sqldump.driverclass=org.postgresql.Driver
#sqldump.dburl=jdbc:postgresql://<host>/<db>
#sqldump.user=
#sqldump.password=
#sqldump.dumpschemapattern=public

# Derby Embedded
#sqldump.driverclass=org.apache.derby.jdbc.EmbeddedDriver
#sqldump.dburl=jdbc:derby:<db-path>
#sqldump.user=sa
#sqldump.password=sa
#sqldump.dumpschemapattern=SA

# HSQLDB In-Process
#sqldump.driverclass=org.hsqldb.jdbc.JDBCDriver
#sqldump.dburl=jdbc:hsqldb:file:<db-path>
#sqldump.user=sa
#sqldump.password=sa
#sqldump.dumpschemapattern=SA

# MySQL
#sqldump.driverclass=com.mysql.jdbc.Driver
#sqldump.dburl=jdbc:mysql://<host>:<port>/<database>
#sqldump.user=
#sqldump.password=
#sqldump.dumpschemapattern=dw

