#
# TODO: copy/rename to sqldump.properties
#

#
# includes other properties files
#
#@includes = other.properties, yet-another.properties

# just a variable for using ahead - name has no special meaning 
outputdir=output

# properties can use fixed/constant property: ${propfilebasedir} - prop that contains prop file directory

#
# filepattern output props
#
sqldump.mainoutputfilepattern=${outputdir}/${schemaname}_${objecttype}.sql
sqldump.outputobjectwithreferencingtable=grant,index
sqldump.outputfilepattern.maptype.PROCEDURE=EXECUTABLE
sqldump.outputfilepattern.maptype.TRIGGER=EXECUTABLE
sqldump.outputfilepattern.maptype.FUNCTION=EXECUTABLE
#sqldump.outputfilepattern.bytype.EXECUTABLE=${outputdir}/EXECUTABLEs.sql

# other sqldump.outputfilepattern examples:
#sqldump.outputfilepattern=output/${schemaname}/${objecttype}/${objectname}.sql
#sqldump.outputfilepattern=output/${objecttype}/${schemaname}_${objectname}.sql
#sqldump.outputobjectwithreferencingtable=grant, index, fk, trigger

# other outputfilepattern by object types. "sqldump.outputobjectwithreferencingtable" takes precedence
#sqldump.outputfilepattern.bytype.TABLE=output/TABLE.sql
#sqldump.outputfilepattern.bytype.VIEW=output/VIEW.sql
#sqldump.outputfilepattern.bytype.INDEX=output/INDEX.sql
#sqldump.outputfilepattern.bytype.EXECUTABLE=output/EXECUTABLE.sql
#sqldump.outputfilepattern.bytype.TRIGGER=output/TRIGGER.sql
#sqldump.outputfilepattern.bytype.SEQUENCE=output/SEQUENCE.sql
#sqldump.outputfilepattern.bytype.SYNONYM=output/SYNONYM.sql
#sqldump.outputfilepattern.bytype.GRANT=output/GRANTS.sql
#sqldump.outputfilepattern.bytype.FK=output/FK.sql

#
# delete files
# option option to delete initial output dir contents (except special hidden files (unix dotfiles, eg: .svn, .git, .hg) and files that starts with "_")
#
sqldump.deleteregularfilesfromdir=${outputdir}

#
# schema grab props
#

# grabclass can be: JDBCSchemaGrabber, JAXBSchemaXMLSerializer, SchemaSerializer, CastorSchemaXMLSerializer
sqldump.schemagrab.grabclass=JDBCSchemaGrabber

sqldump.dotests=false
sqldump.doschemadump=true
# dumpclasses can be: SchemaModelScriptDumper, SchemaSerializer, JAXBSchemaXMLSerializer, CastorSchemaXMLSerializer, graph.Schema2GraphML, xtradumpers.AlterSchemaSuggester
sqldump.schemadump.dumpclasses=SchemaModelScriptDumper, JAXBSchemaXMLSerializer, graph.Schema2GraphML
sqldump.doschemadump.grants=true
sqldump.doschemadump.fks=true
sqldump.doschemadump.exportedfks=true
sqldump.doschemadump.fks.atend=true
sqldump.doschemadump.pks=true
# sqldump.dbspecificfeatures.grabindexes may be used instead of sqldump.doschemadump.indexes (really better performance on oracle)
sqldump.doschemadump.indexes=false
sqldump.doschemadump.ignoretableswithzerocolumns=true
sqldump.schemadump.dumpdropstatements=false

# schema info: domain tables
# (used by AlterSchemaSuggester, but may be have other uses, like 'sqldump.datadump.tables')
#sqldump.schemainfo.domaintables=DOMAIN_TABLE_X, DOMAIN_TABLE_Y

# schema names to dump
sqldump.dumpschemapattern=DW, SA, EMPDEPT

# exclude table filters (regex), splitted by "|"
#sqldump.schemadump.tablename.excludes=EMPT.* | .*_OLD | ZZZ_.* 

sqldump.dumpwithschemaname=true

# recursive dump (grab) of tables based on FKs
sqldump.doschemadump.recursivedumpbasedonfks=true
sqldump.doschemadump.recursivedumpbasedonfks.exportedfks=false
sqldump.doschemadump.recursivedumpbasedonfks.deep=true

#
# 'sqldump.fromdbid' selects which specificgrabclass to use, column type conversion, ... 
#
#sqldump.fromdbid=oracle
#sqldump.todbid=pgsql
# autodetect database product
sqldump.fromdbid.autodetect=true

#
# script dump properties
#
#sqldump.dumpsynonymastable=false
#sqldump.dumpviewastable=false
#sqldump.dumpmaterializedviewastable=false

sqldump.schemadump.usecreateorreplace=true

#
# dbms specific features grab
#
sqldump.usedbspecificfeatures=true

# grab dbspecific by type: default is true
sqldump.dbspecificfeatures.grabindexes=true
#sqldump.dbspecificfeatures.grabexecutables=true
#sqldump.dbspecificfeatures.grabviews=false
#sqldump.dbspecificfeatures.grabtriggers=false
#sqldump.dbspecificfeatures.grabsynonyms=false
#sqldump.dbspecificfeatures.grabsequences=false
#sqldump.dbspecificfeatures.grabextraconstraints=false

#sqldump.dbspecificfeatures.sequencestartwithdump=false
#sqldump.dbspecificfeatures.grabfkfromuk=false
#sqldump.dbspecificfeatures.dumpphysicalattributes=true
#sqldump.dbspecificfeatures.dumplogging=true

#
# data dump props
#
sqldump.dodatadump=false

# types of table to dump (default: all but VIEW, MATERIALIZED_VIEW)
#sqldump.datadump.tabletypes=TABLE, SYNONYM, SYSTEM_TABLE, VIEW, MATERIALIZED_VIEW, EXTERNAL_TABLE

# filter tables to dump data
#sqldump.datadump.tables=TABLE_X, TABLE_Y, TABLE_Z
#sqldump.datadump.tables=${sqldump.schemainfo.domaintables}, TABLE_Z

# syntaxes (any of: insertinto, csv, json, xml, html, ffc)
sqldump.datadump.dumpsyntaxes=insertinto, csv

# default prop: sqldump.datadump.outfilepattern
# sqldump.datadump.outfilepattern=${outputdir}/data/${tablename}.${syntaxfileext}
sqldump.datadump.outfilepattern=${outputdir}/data/${tablename}${partitionby}.${syntaxfileext}

# syntax-specific props: sqldump.datadump.outfilepattern.syntax@<syntaxid>
#sqldump.datadump.outfilepattern.syntax@insertinto=${outputdir}/data_${tablename}.sql
#sqldump.datadump.outfilepattern.syntax@csv=${outputdir}/data_${tablename}.csv
#sqldump.datadump.outfilepattern.syntax@json=${outputdir}/data_${tablename}.json
#sqldump.datadump.outfilepattern.syntax@xml=${outputdir}/data_${tablename}.xml

#
# InsertInfo syntax props
#
sqldump.datadump.insertinto.withcolumnnames=true
sqldump.datadump.insertinto.dateformat='TO_DATE('''yyyy-MM-dd''',''YYYY-MM-DD'')'

#
# CSV syntax props
#
sqldump.datadump.csv.tablenameheader=false
sqldump.datadump.csv.columnnamesheader=true
sqldump.datadump.csv.recorddelimiter=\r\n
sqldump.datadump.csv.columndelimiter=;
sqldump.datadump.csv.nullvalue=
sqldump.datadump.csv.floatlocale=en

# JSON syntax props
sqldump.datadump.json.dateformat='"'yyyy-MM-dd'T'HH:mm:ss.SSSZ'"'

# XML syntax props
sqldump.datadump.xml.nullvalue=nil

# HTML syntax props
sqldump.datadump.html.nullvalue=
#TODO sqldump.datadump.html.floatlocale

# FFC (formatted fixed column) syntax props
#sqldump.datadump.ffc.linegroupsize=30
#sqldump.datadump.ffc.columndelimiter=\ ;\ 
#sqldump.datadump.ffc.nullvalue=<null>
#sqldump.datadump.ffc.showcolnames=false
#sqldump.datadump.ffc.showcolnameslines=false
sqldump.datadump.ffc.floatlocale=pt

# charset:: default: UTF-8; options: ISO-8859-1, UTF-16, US-ASCII, ...
#sqldump.datadump.charset=UTF-8 
# default date format: ''yyyy-MM-dd''
sqldump.datadump.dateformat=''yyyy-MM-dd''
# oracle TO_DATE syntax: sqldump.datadump.dateformat='TO_DATE('''yyyy-MM-dd''',''YYYY-MM-DD'')'
sqldump.datadump.rowlimit=100
sqldump.datadump.orderbypk=true

#sqldump.datadump.TABLE_X.rowlimit=500
#sqldump.datadump.TABLE_X.where=NAME like 'Bill %'
#sqldump.datadump.TABLE_Y.columns=id, name
#sqldump.datadump.TABLE_Y.order=TYPE, NAME

#
# sql queries
#
#sqldump.queries=table_x, q2, partitiontest

#sqldump.query.table_x.sql=\
#select * from TABLE_X
#sqldump.query.table_x.name=TABLE_X
#sqldump.query.table_x.rowlimit=10000

#sqldump.query.q2.sqlfile=c:/xxx/query2.sql
#sqldump.query.q2.name=query_2
#sqldump.datadump.outfilepattern.id@q2=${outputdir}/data_q2_${tablename}.${syntaxfileext}

#sqldump.query.partitiontest.name=partition_test
#sqldump.query.partitiontest.sql=\
#  select group_id, id, name\
#  from partition_table_test
#sqldump.query.partitiontest.partitionby=_${col:group_id}
#sqldump.datadump.outfilepattern.id@partitiontest.syntax@csv=${outputdir}/data_partitiontest_csv_${tablename}${partitionby}.csv
#sqldump.datadump.outfilepattern.id@partitiontest=${outputdir}/data_partitiontest_${tablename}${partitionby}.${syntaxfileext}


#
# serialization & xml serialization
#
sqldump.serialization.outfile=${outputdir}/schemaModel.ser
sqldump.serialization.infile=${outputdir}/schemaModel.ser

sqldump.xmlserialization.jaxb.outfile=${outputdir}/schemaModel.jaxb.xml
sqldump.xmlserialization.jaxb.infile=${outputdir}/schemaModel.jaxb.xml

sqldump.xmlserialization.castor.outfile=${outputdir}/schemaModel.castor.xml
sqldump.xmlserialization.castor.infile=${outputdir}/schemaModel.castor.xml


#
# graphML output
#
sqldump.graphmldump.outputfile=${outputdir}/db-schema.graphml
#sqldump.graphmldump.showschemaname=true|false
#sqldump.graphmldump.showconstraints=false|true
#sqldump.graphmldump.showindexes=false|true
#
# default edgelabel: NONE
#sqldump.graphmldump.edgelabel=FK|FKANDCOLUMNS|COLUMNS|NONE
#sqldump.graphmldump.nodeheightbycolsnumber=true|false
#
# regex-based stereotypes, splitted by "|" - stereotype must be defined in a graphml-snippets properties file
#sqldump.graphmldump.nodestereotyperegex.zzz=ZZZ_.* | .*_ZZZ_.*
#
# include, or not, stereotype 'classes' - defaults below
#sqldump.graphmldump.addtabletypestereotype=true
#sqldump.graphmldump.addschemastereotype=false
# vertex types: root, leaf, connected, disconnected
#sqldump.graphmldump.addvertextypestereotype=false
#
# snippets file (non-default)
#sqldump.graphmldump.snippetsfile=graphml-snippets-simple.properties

#
# alter schema suggestions output
#
sqldump.alterschemasuggester.outfile=${outputdir}/alter-schema-suggestions.sql
sqldump.alterschemasuggester.simplefksonly=true
#sqldump.alterschemasuggester.alterobjectsfromschemas=SCHEMA_X, SCHEMA_Y


############
#
# connection/driver info 
#

#
# reads username/password from console or gui
#
#sqldump.askforusername=true
#sqldump.askforpassword=true
#sqldump.askforusernamegui=true
#sqldump.askforpasswordgui=true

# MS Access - doesn't really work (yet)
#sqldump.driverclass=sun.jdbc.odbc.JdbcOdbcDriver
#sqldump.dburl=jdbc:odbc:Driver={MicroSoft Access Driver (*.mdb)};DBQ=Northwind.mdb

# Oracle
#sqldump.driverclass=oracle.jdbc.OracleDriver
#sqldump.dburl=jdbc:oracle:thin:@<url>:<port>:<sid>
#sqldump.user=scott
#sqldump.password=tiger

# PostgreSQL
#sqldump.driverclass=org.postgresql.Driver
#sqldump.dburl=jdbc:postgresql://<host>/<db>
#sqldump.user=
#sqldump.password=

# Derby Embedded
#sqldump.driverclass=org.apache.derby.jdbc.EmbeddedDriver
#sqldump.dburl=jdbc:derby:<db-path>
#sqldump.user=sa
#sqldump.password=sa

# HSQLDB In-Process
#sqldump.driverclass=org.hsqldb.jdbc.JDBCDriver
#sqldump.dburl=jdbc:hsqldb:file:<db-path>
#sqldump.user=sa
#sqldump.password=sa

# MySQL
#sqldump.driverclass=com.mysql.jdbc.Driver
#sqldump.dburl=jdbc:mysql://<host>:<port>/<database>
#sqldump.user=
#sqldump.password=

# SQLite
#sqldump.driverclass=org.sqlite.JDBC
#sqldump.dburl=jdbc:sqlite:/path/to/sqlite.db

