<project name="sqldump" xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<property name="src.dir" value="src"/>
	<property name="src.diff.dir" value="src_diff"/>
	<property name="src.graphml.dir" value="src_graphml"/>
	<property name="src.mondrian.dir" value="src_mondrian"/>
	<property name="src.run.dir" value="src_run"/>
	<property name="src.test.dir" value="src_test"/>
	<property name="src.xtra.dir" value="src_xtra"/>
	
	<property name="bin.dir"  value="bin/main"/>
	<property name="bin.test.dir"  value="bin/test"/>
	<property name="dist.dir" value="dist"/>
	<property name="lib.dir" value="lib"/>
	<property name="javadoc.dir" value="dist/javadocs"/>
	
	<property name="sqldump.mainclass" value="tbrugz.sqldump.SQLDump"/>
	<property name="sqldump.sqlrun.mainclass" value="tbrugz.sqldump.sqlrun.SQLRun"/>
	<property name="sqldump.sqldiff.mainclass" value="tbrugz.sqldiff.SQLDiff"/>
	
	<property file="build.properties"/>
	<property file="${src.dir}/sqldump-version.properties"/>
	<property file="ivysettings.properties"/>

	<property name="lib.derby" value="${lib.dir}/derby-10.9.1.0.jar"/>
	<property name="lib.h2" value="${lib.dir}/h2-1.3.170.jar"/>
	<property name="lib.hsqldb" value="${lib.dir}/hsqldb-2.2.8.jar"/>
	<property name="lib.junit" value="${lib.dir}/junit-4.11.jar"/>
	<property name="lib.hamcrest" value="${lib.dir}/hamcrest-core-1.3.jar"/>
	
	<!--
	<ivy:cachepath pathid="classpath.compile.ivy" conf="default"  keep="true" transitive="false" type="jar,bundle" log="download-only" useOrigin="true" />
	<ivy:cachepath pathid="classpath.compiletest.ivy" conf="test" keep="true" transitive="false" type="jar,bundle" log="download-only" useOrigin="true" />
	-->
	
	<path id="classpath.compile">
		<!--path refid="classpath.compile.ivy"/-->
		<pathelement location="${lib.dir}/commons-logging-1.1.1.jar"/>
		<pathelement location="${lib.dir}/kmlutils-0.5.2.jar"/>
		<pathelement location="${lib.dir}/jettison-1.3.3.jar"/>
		<pathelement location="${lib.dir}/olap4j-1.1.0.jar"/>
		<pathelement location="${lib.dir}/mondrian-3.5.7.jar"/>
		<pathelement location="${lib.dir}/eigenbase-xom-1.3.1.jar"/>
	</path>

	<path id="classpath.compiletest">
		<path refid="classpath.compile"/>
		<!--path refid="classpath.compiletest.ivy"/-->
		<pathelement location="${lib.junit}"/>
		<pathelement location="${lib.hamcrest}"/>
		<pathelement location="${bin.dir}"/>
	</path>
	
	<path id="classpath.run">
		<pathelement location="${bin.dir}"/>
		<path refid="classpath.compile"/>
		<pathelement location="${lib.dir}/log4j-1.2.16.jar"/>
		<pathelement location="${run.xtralib}"/>
	</path>

	<path id="classpath.run.jaxb">
		<path refid="classpath.run"/>
		<pathelement location="${jaxb.lib}"/>
	</path>

	<path id="classpath.run.derby">
		<path refid="classpath.run"/>
		<pathelement location="${lib.derby}"/>
	</path>

	<path id="classpath.run.hsqldb">
		<path refid="classpath.run"/>
		<pathelement location="${lib.hsqldb}"/>
	</path>

	<path id="classpath.run.h2">
		<path refid="classpath.run"/>
		<pathelement location="${lib.h2}"/>
	</path>
	
	<path id="classpath.test">
		<path refid="classpath.run.h2"/>
		<pathelement location="${bin.test.dir}"/>
		<pathelement location="${lib.derby}"/>
		<pathelement location="${lib.hsqldb}"/>
		<pathelement location="${lib.junit}"/>
		<pathelement location="${lib.hamcrest}"/>
		<pathelement location="lib/org.eclipse.persistence.core-2.4.0.jar"/>
		<pathelement location="lib/org.eclipse.persistence.moxy-2.4.0.jar"/>
		<pathelement location="lib/org.eclipse.persistence.asm-3.3.1.v201206041142.jar"/>
		<pathelement location="lib/eigenbase-properties-1.1.2.jar"/>
		<pathelement location="lib/commons-collections-3.2.jar"/>
		<pathelement location="lib/commons-dbcp-1.2.1.jar"/>
		<pathelement location="lib/commons-pool-1.2.jar"/>
		<pathelement location="lib/commons-vfs-1.0.jar"/>
		<pathelement location="lib/eigenbase-resgen-1.3.1.jar"/>
		<pathelement location="lib/commons-math-1.1.jar"/>
	</path>

	<target name="prepare">
		<mkdir dir="${bin.dir}"/>
		<mkdir dir="${bin.test.dir}"/>
		<mkdir dir="${lib.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${javadoc.dir}"/>
		<!--if>
			<available file="sqldump.properties"/>
			<then></then>
			<else>
				<copy file="sqldump.properties.template" tofile="sqldump.properties" verbose="on"/>
			</else>
		</if-->
	</target>

	<target name="compile" depends="prepare">
		<!--property name="classpath.compile.prop" refid="classpath.compile"/>
		<echo message="classpath.compile: ${classpath.compile.prop}" /-->
		<javac destdir="${bin.dir}" classpathref="classpath.compile" includeantruntime="false" debug="on" source="1.6" target="1.6">
			<src path="${src.dir}"/>
			<src path="${src.graphml.dir}"/>
			<src path="${src.diff.dir}"/>
			<src path="${src.run.dir}"/>
			<src path="${src.mondrian.dir}"/>
			<src path="${src.xtra.dir}"/>
		</javac>
		<javac destdir="${bin.test.dir}" classpathref="classpath.compiletest" includeantruntime="false" debug="on" source="1.6" target="1.6">
			<src path="${src.test.dir}"/>
		</javac>
		<copy todir="${bin.dir}" >
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/jaxb.index"/>
			</fileset>
			<fileset dir="${src.graphml.dir}">
				<include name="**/*.properties"/>
			</fileset>
			<fileset dir="${src.mondrian.dir}">
				<include name="**/*.properties"/>
			</fileset>
		</copy>
		<copy todir="${bin.test.dir}" >
			<fileset dir="${src.test.dir}">
				<include name="**/*.properties"/>
				<include name="**/jaxb.index"/>
			</fileset>
		</copy>
	</target>

	<target name="run" depends="compile">
		<java classpathref="classpath.run.jaxb" classname="${sqldump.mainclass}" failonerror="true">
			<arg value="${run.arg}"/>
		</java>
		<echo message="run finished" />
	</target>
	
	<!-- full test: 
		1- dump jaxb model
		2- load into different databases (sqlrun)
		3- dump from all databases
		4- compare with original (sqldiff) --> 
	<!--
		-> moved to RoundTripTest unit test class
		target name="test-roundtrip1" depends="compile">
		<echo message="roundtrip1: phase 1: dump [jaxb]" />
		<java classpathref="classpath.run.jaxb" classname="${sqldump.mainclass}">
			<arg value="-propfile=test/r1-sqldump-jaxb-test.properties"/>
		</java>

		<echo message="roundtrip1: phase 2: run [derby]" />
		<java classpathref="classpath.run.derby" classname="${sqldump.sqlrun.mainclass}" fork="true">
			<arg value="-propfile=test/r2-sqlrun-derby-test.properties"/>
		</java>
		<echo message="roundtrip1: phase 2: run [hsqldb]" />
		<java classpathref="classpath.run.hsqldb" classname="${sqldump.sqlrun.mainclass}" fork="true">
			<arg value="-propfile=test/r2-sqlrun-hsqldb-test.properties"/>
		</java>

		<echo message="roundtrip1: phase 3: dump [derby]" />
		<java classpathref="classpath.run.derby" classname="${sqldump.mainclass}" fork="true">
			<arg value="-propfile=test/r3-sqldump-derby-test.properties"/>
		</java>
		<echo message="roundtrip1: phase 3: dump [hsqldb]" />
		<java classpathref="classpath.run.hsqldb" classname="${sqldump.mainclass}" fork="true">
			<arg value="-propfile=test/r3-sqldump-hsqldb-test.properties"/>
		</java>

		<echo message="roundtrip1: phase 4: diff [jaxb/jaxb-derby]" />
		<java classpathref="classpath.run.jaxb" classname="${sqldump.sqldiff.mainclass}">
			<arg value="-propfile=test/r4-sqldiff-test1.properties"/>
		</java>
		<echo message="roundtrip1: phase 4: diff [jaxb/jaxb-hsqldb]" />
		<java classpathref="classpath.run.jaxb" classname="${sqldump.sqldiff.mainclass}">
			<arg value="-propfile=test/r4-sqldiff-test2.properties"/>
		</java>
		<echo message="roundtrip1: phase 4: diff [jaxb-derby/jaxb-hsqldb]" />
		<java classpathref="classpath.run.jaxb" classname="${sqldump.sqldiff.mainclass}">
			<arg value="-propfile=test/r4-sqldiff-test3.properties"/>
		</java>
	</target-->
	
	<target name="test" depends="compile" description="run junit tests">
		<junit printsummary="true" filtertrace="off" fork="true" showoutput="false">
			<classpath refid="classpath.test" />
			<formatter type="xml"/>
			<test name="tbrugz.sqldump.AllTestSuite" todir="${dist.dir}"/>
		</junit>
	</target>
	
	<target name="jar" depends="compile" description="builds jar">
		<jar destfile="${dist.dir}/jars/sqldump.jar"
			basedir="${bin.dir}"
			includes="**/*.class, **/*.properties, **/jaxb.index">
			<exclude name="log4j.properties"/>
			<exclude name="**/jaxb.properties"/>
			<manifest>
				<attribute name="Implementation-Title" value="${ant.project.name}"/>
				<attribute name="Implementation-Version" value="${version}"/> 
				<attribute name="Main-Class" value="${sqldump.mainclass}"/>
			</manifest>
		</jar>
		<!--jar destfile="${dist.dir}/sqldump-jaxb.jar"
			basedir="${src.test.dir}"
			includes="**/jaxb.properties">
		</jar-->
	</target>
	
	<target name="jar-source" depends="prepare" description="builds sources jar">
		<jar destfile="${dist.dir}/sources/sqldump.jar">
			<fileset dir="${src.dir}">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${src.graphml.dir}">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${src.diff.dir}">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${src.run.dir}">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${src.mondrian.dir}">
				<include name="**/*.java"/>
			</fileset>
			<fileset dir="${src.xtra.dir}">
				<include name="**/*.java"/>
			</fileset>
		</jar>
	</target>

	<target name="javadoc" depends="prepare">
		<!--echo message="java.home: ${java.home}" /-->
		<javadoc destdir="${javadoc.dir}" sourcepath="${src.dir}" classpathref="classpath.compile">
			<sourcepath location="${src.dir}"/>
			<sourcepath location="${src.diff.dir}"/>
			<sourcepath location="${src.run.dir}"/>
			<sourcepath location="${src.graphml.dir}"/>
			<sourcepath location="${src.mondrian.dir}"/>
		</javadoc>
		<jar destfile="${dist.dir}/javadocs/sqldump.jar"
			basedir="${javadoc.dir}" includes="**">
		</jar>
	</target>
	
	<target name="dist" depends="jar,jar-source" description="builds jars"/>
	
	<target name="all" depends="clean,javadoc,publish" description="clean, build and publish project"/>

	<target name="clean">
		<delete dir="${bin.dir}"/>
		<delete dir="${bin.test.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="output"/>
		<delete dir="work"/>
		<!-- for testing ivy -->
		<!--delete>
			<fileset dir="${lib.dir}">
				<include name="**"/>
			</fileset>
		</delete-->
	</target>
	
	<!-- ========= dependencies tasks ========== -->
	<!-- use: resolve-ivy OR resolve-get -->
	<!-- hint: ant -autoproxy -lib <ivy-dir> resolve -->
	<!-- XXX: install ivy? see: ivy/example/go-ivy -->
	
	<!--target name="check-kmlutils" description="checks existence of kmlutils.jar">
		<available file="${lib.dir}/kmlutils.jar" property="kmlutils.present"/>
	</target>

	<target name="resolve-kmlutils" depends="check-kmlutils" description="retrieve kmlutils dependency" unless="kmlutils.present">
		<get dest="${lib.dir}/kmlutils.jar" src="http://cdn.bitbucket.org/tbrugz/kmlutils/downloads/svg2kml.jar" verbose="true"/>
	</target-->

	<!--target name="check-mondrianschema2graphml" description="checks existence of mondrianschema2graphml.jar">
		<available file="${lib.dir}/mondrianschema2graphml.jar" property="mondrianschema2graphml.present"/>
	</target>
	
	<target name="resolve-mondrianschema2graphml" depends="check-mondrianschema2graphml" description="retrieve kmlutils dependency" unless="mondrianschema2graphml.present">
		<get dest="${lib.dir}" src="http://cdn.bitbucket.org/tbrugz/mondrianschema2graphml/downloads/mondrianschema2graphml.jar" verbose="true"/>
	</target>
	
	<target name="resolve-base" depends="resolve-mondrianschema2graphml">
	</target-->

	<target name="config-ivy-file" if="ivy.settings.file">
		<echo message="setting ivy file: ${ivy.settings.file}"/>
		<ivy:settings file="${ivy.settings.file}"/>
	</target>
	
	<target name="config-ivy-dir" if="ivy.settings.dir" unless="ivy.settings.file">
		<echo message="setting ivy file (by dir): ${ivy.settings.dir}/ivysettings.xml"/>
		<ivy:settings file="${ivy.settings.dir}/ivysettings.xml"/>
	</target>

	<target name="config-ivy" depends="config-ivy-file,config-ivy-dir"/>
	
	<target name="resolve" depends="config-ivy" description="retrieve dependencies with ivy">
		<ivy:retrieve haltonfailure="false"/>
		<echo message="ivy.retrieve.pattern: ${ivy.retrieve.pattern}"/>
	</target>

	<!--target name="resolve-get" description="retrieve dependencies with 'get'" depends="resolve-base">
		<get dest="${lib.dir}">
			<url url="http://repo1.maven.org/maven2/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar"/>
			<url url="http://repo1.maven.org/maven2/log4j/log4j/1.2.16/log4j-1.2.16.jar"/>
		</get>
		<!- - markdownj: markdown testing - ->
		<get dest="${lib.dir}/markdownj-1.0.2b4-0.3.0.jar" src="http://code.google.com/p/markdownj/downloads/detail?name=markdownj-1.0.2b4-0.3.0.jar&amp;can=2&amp;q=" verbose="true"/>
	</target-->
	
	<target name="report-ivy" depends="resolve">
		<echo message="ivy.settings.dir = ${ivy.settings.dir}" />
		<ivy:report todir="bin/report-ivy"/>
	</target>
	
	<target name="publish" depends="dist,config-ivy" description="publish this project in the ivy repository">
		<property name="revision" value="${version}"/>
		<property name="resolver.publish" value="local"/>
		<ivy:info/>
		<echo message="revision = ${revision}"/>
		<property name="ivy.pom.version" value="${revision}"/>
		<ivy:deliver conf="*(public)" deliverpattern="${dist.dir}/[type]s/sqldump.ivy.xml" status="release" validate="true" pubrevision="${revision}"/>
		<ivy:makepom ivyfile="ivy.xml" pomfile="dist/poms/${ivy.module}.pom">
			<mapping conf="default" scope="compile"/>
			<mapping conf="test" scope="test"/>
		</ivy:makepom>
		<ivy:publish resolver="${resolver.publish}" pubrevision="${revision}" status="release" update="true" overwrite="true"
			artifactsPattern="${dist.dir}/[type]s/[artifact].[ext]">
			<artifact name="${ivy.module}" ext="pom" type="pom" />
			<artifact name="${ivy.module}" ext="ivy.xml" type="ivy" />
			<!--artifact name="${ivy.module}" ext="jar" type="source" classifier="sources"/-->
			<!--artifact name="${ivy.module}" ext="jar" type="javadoc" classifier="javadoc"/-->
		</ivy:publish>
		<echo message="project ${ant.project.name} released with version ${revision} to ${resolver.publish}"/>
	</target>

	<!-- ========= /dependencies tasks ========== -->
	
	<!-- http://cruisecontrol.sourceforge.net/ ? jenkins? -->
</project>
