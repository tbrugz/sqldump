
oracle table types: SYNONYM | TABLE | VIEW

ms access table types: SYSTEM TABLE | TABLE


 * TODOne: PKs/FKs
 * getPrimaryKeys(String catalog, String schema, String table)
 * Retrieves a description of the given table's primary key columns.
 * 
 * getExportedKeys(String catalog, String schema, String table)
 * 
 * getImportedKeys(String catalog, String schema, String table)
 * Retrieves a description of the primary key columns that are referenced by the given table's foreign key columns (the primary keys imported by a table).
 * 
 * getCrossReference(String parentCatalog, String parentSchema, String parentTable, String foreignCatalog, String foreignSchema, String foreignTable)
 * Retrieves a description of the foreign key columns in the given foreign key table that reference the primary key or the columns representing a unique constraint of the parent table (could be the same or a different table).
 * 
 * TODOne: grants
 * getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)
 * Retrieves a description of the access rights for each table available in a catalog.
 * 
 * Problem with getImportedKeys / getExportedKeys
 * http://archives.postgresql.org/pgsql-jdbc/2002-01/msg00133.php

Database Access Through JDBC:
http://oreilly.com/catalog/javadata/chapter/ch04.html


==============
constraints:
check, not null, unique 
pk, fk

http://www.w3schools.com/sql/sql_constraints.asp
x   NOT NULL (Column)
x   UNIQUE (Constraint)
x   PRIMARY KEY (Constraint? Column?)
x   FOREIGN KEY (FK)
x   CHECK (Constraint)
x   DEFAULT (Column)


http://www.w3schools.com/sql/sql_unique.asp
	The UNIQUE and PRIMARY KEY constraints both provide a guarantee for uniqueness for a column or set of columns.
	A PRIMARY KEY constraint automatically has a UNIQUE constraint defined on it.
	Note that you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.

	CREATE TABLE Persons
	(
	P_Id int NOT NULL,
	LastName varchar(255) NOT NULL,
	FirstName varchar(255),
	Address varchar(255),
	City varchar(255),
	CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)
	)

	MySQL / SQL Server / Oracle / MS Access:
	ALTER TABLE Persons
	ADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)
	
	ALTER TABLE Persons
	ADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)

http://www.w3schools.com/sql/sql_check.asp
	CONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes')
	
	ALTER TABLE Persons
	ADD CONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes')

http://www.w3schools.com/sql/sql_default.asp
	The DEFAULT constraint is used to insert a default value into a column.
	CREATE TABLE Persons
	(
	P_Id int NOT NULL,
	LastName varchar(255) NOT NULL,
	FirstName varchar(255),
	Address varchar(255),
	City varchar(255) DEFAULT 'Sandnes'
	)
	
==============
select distinct OBJECT_TYPE from all_objects order by object_type

CLUSTER
CONSUMER GROUP
CONTEXT
DIRECTORY
EVALUATION CONTEXT
FUNCTION
INDEX
INDEX PARTITION
INDEX SUBPARTITION
INDEXTYPE
JAVA CLASS
JAVA DATA
JAVA RESOURCE
JAVA SOURCE
JOB CLASS
LIBRARY
LOB
MATERIALIZED VIEW
OPERATOR
PACKAGE
PACKAGE BODY
PROCEDURE
PROGRAM
SCHEDULE
SEQUENCE
SYNONYM
TABLE
TABLE PARTITION
TABLE SUBPARTITION
TRIGGER
TYPE
TYPE BODY
VIEW
WINDOW
WINDOW GROUP
XML SCHEMA

select * from user_source
"name, type, line, text"

select distinct type from all_source 

FUNCTION
JAVA SOURCE
PACKAGE
PACKAGE BODY
PROCEDURE
TRIGGER
TYPE
TYPE BODY


-------------

SYNONYM, SEQUENCE, TABLE, INDEX, VIEW, TRIGGER, LOB,

from http://sourceforge.net/projects/vela/files/Vela/Vela1.1/

String sqlDBObjects = " SELECT OBJECT_ID, OBJECT_TYPE, STATUS, OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_TYPE!='SYNONYM'";
sqlDBObjects = sqlDBObjects+" UNION ";
sqlDBObjects = sqlDBObjects+" SELECT OBJECT_ID, OBJECT_TYPE, STATUS, OBJECT_NAME FROM ALL_OBJECTS WHERE OBJECT_TYPE = 'SYNONYM' AND OBJECT_NAME IN (SELECT OBJECT_NAME FROM USER_OBJECTS) ORDER BY 4";

if(objectType!=null && objectType.equalsIgnoreCase("TRIGGER"))
	sql="SELECT DESCRIPTION, TRIGGER_BODY FROM USER_TRIGGERS WHERE TRIGGER_NAME = '"+objectName+"'";
else if(objectType!=null && objectType.equalsIgnoreCase("VIEW"))
	sql="SELECT VIEW_NAME, TEXT FROM USER_VIEWS WHERE VIEW_NAME = '"+objectName+"'";
else
	sql="SELECT TEXT SOURCE FROM USER_SOURCE WHERE NAME = '"+objectName+"' AND TYPE='"+objectType+"'";

SELECT MIN_VALUE, MAX_VALUE, INCREMENT_BY, LAST_NUMBER FROM USER_SEQUENCES WHERE SEQUENCE_NAME = '"+ sequenceName + "'

SELECT TABLE_NAME, COLUMN_NAME, COLUMN_POSITION FROM USER_IND_COLUMNS WHERE INDEX_NAME = '"+ indxName + "'

-------------


SELECT OBJECT_ID, OBJECT_TYPE, STATUS, OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_TYPE!='SYNONYM'

SELECT OBJECT_ID, OBJECT_TYPE, STATUS, OBJECT_NAME FROM ALL_OBJECTS WHERE OBJECT_TYPE = 'SYNONYM' AND OBJECT_NAME IN (SELECT OBJECT_NAME FROM USER_OBJECTS) ORDER BY 4

SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE!='SYNONYM'

SELECT * FROM ALL_OBJECTS WHERE OBJECT_TYPE = 'SYNONYM' AND OBJECT_NAME IN (SELECT OBJECT_NAME FROM USER_OBJECTS) ORDER BY 4

SEQUENCE, TABLE, INDEX, VIEW, TRIGGER, LOB

select * from user_procedures


user_triggers, user_procedures


--------------


desc user_source

select distinct type from user_source

select name, type, line, text from user_source
where type in ('PROCEDURE','PACKAGE','PACKAGE BODY','FUNCTION','TYPE')
order by type, name, line

select distinct type, name from user_source
order by type, name

select * from user_source
where type='TYPE'

select * from user_source
where type='JAVA SOURCE'


--------------

select * from all_objects where object_name like 'USER_%'

--------------
SELECT MIN_VALUE, MAX_VALUE, INCREMENT_BY, LAST_NUMBER FROM USER_SEQUENCES WHERE SEQUENCE_NAME = '"+ sequenceName + "'

select sequence_name, min_value, increment_by, last_number from user_sequences
order by sequence_name

--------------
indexes:

select * from user_indexes   
select * from user_ind_columns
select * from user_ind_expressions
select * from user_join_ind_columns

select ui.table_owner, ui.index_name, ui.uniqueness, uic.column_name
from user_indexes ui, user_ind_columns uic
where UI.INDEX_NAME = UIC.INDEX_NAME   
order by ui.table_owner, ui.index_name, uic.column_name

select
   dbms_metadata.get_ddl('INDEX',index_name)
from
   user_indexes

--------------

grabbing indexes takes too long. maybe use db specific feature for this...

with "java" grab indexes:
10:49:38,993  INFO init...
(...)
11:14:27,847  INFO ...done

with oracle grab indexes:
13:54:08,106  INFO init...
(...)
13:55:16,810  INFO ...done

================

change default schema?

oracle:
ALTER SESSION SET CURRENT_SCHEMA=animals
SET CURRENT SCHEMA
