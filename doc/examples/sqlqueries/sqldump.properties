
###############################################################################
# sqldump config file                                                         #
# https://github.com/tbrugz/sqldump                                           #
###############################################################################

#
# Example file using SQLQueries
#

# just a variable for using ahead - name has no special meaning 
outputdir=output

# processingclasses can be: graph.ResultSet2GraphML, DataDump, SQLQueries, SQLTests, SQLDialectTransformer
sqldump.processingclasses=SQLQueries


#
# delete files
# option option to delete initial output dir contents (except special hidden files (unix dotfiles, eg: .svn, .git, .hg) and files that starts with "_")
#
sqldump.deleteregularfilesfromdir=${outputdir}


#
# data dump properties
#

# dump syntaxes (any of: blob, insertinto, csv, json, xml, html, ffc, updatebypk)
sqldump.datadump.dumpsyntaxes=insertinto, csv, xml, json, html, updatebypk

sqldump.datadump.outfilepattern=${outputdir}/data/[tablename][partitionby].[syntaxfileext]


#
# sql queries
#

sqldump.queries=q1, q2

sqldump.query.q1.sql=select t.table_schema, t.table_name, c.column_name, c.ordinal_position, c.is_nullable, c.data_type \
from information_schema.tables t, information_schema.columns c \
where t.table_schema = c.table_schema \
and t.table_name = c.table_name \
and c.is_nullable = ? \
order by t.table_schema, t.table_name, c.ordinal_position

sqldump.query.q1.name=information_schema_tables
sqldump.query.q1.rowlimit=1000
sqldump.query.q1.partitionby=-[col:table_schema]
sqldump.query.q1.keycols=table_schema, table_name, column_name
# parameter to be added to q1
sqldump.query.q1.param.1=YES

sqldump.query.q2.sqlfile=query_views.sql
sqldump.query.q2.name=information_schema_views
sqldump.query.q2.partitionby=-[col:table_schema]
sqldump.query.q2.keycols=table_catalog, table_schema, table_name

# property to be dynamically substituted in q2 (see 'query_view.sql')
q2.filter=and table_schema = 'information_schema'


############
#
# connection/driver info 
#

#
# reads username/password from console or gui
#
#sqldump.askforusername=true
#sqldump.askforpassword=true
#sqldump.askforusernamegui=true
#sqldump.askforpasswordgui=true

# executes query at connection initialization
#sqldump.initsql=set session LC_NUMERIC to 'English'

# MS Access - doesn't really work (yet)
#sqldump.driverclass=sun.jdbc.odbc.JdbcOdbcDriver
#sqldump.dburl=jdbc:odbc:Driver={MicroSoft Access Driver (*.mdb)};DBQ=Northwind.mdb

# Oracle
#sqldump.driverclass=oracle.jdbc.OracleDriver
#sqldump.dburl=jdbc:oracle:thin:@<url>:<port>:<sid>
#sqldump.user=scott
#sqldump.password=tiger

# PostgreSQL
#sqldump.driverclass=org.postgresql.Driver
#sqldump.dburl=jdbc:postgresql://<host>/<db>
#sqldump.user=
#sqldump.password=

# Derby Embedded
#sqldump.driverclass=org.apache.derby.jdbc.EmbeddedDriver
#sqldump.dburl=jdbc:derby:<db-path>
#sqldump.user=sa
#sqldump.password=sa

# HSQLDB In-Process
#sqldump.driverclass=org.hsqldb.jdbc.JDBCDriver
#sqldump.dburl=jdbc:hsqldb:file:<db-path>
#sqldump.user=sa
#sqldump.password=sa

# MySQL
#sqldump.driverclass=com.mysql.jdbc.Driver
#sqldump.dburl=jdbc:mysql://<host>:<port>/<database>
#sqldump.user=
#sqldump.password=

# SQLite
#sqldump.driverclass=org.sqlite.JDBC
#sqldump.dburl=jdbc:sqlite:</path/to/sqlite.db>

# H2
#sqldump.driverclass=org.h2.Driver
#sqldump.dburl=jdbc:h2:~/test
